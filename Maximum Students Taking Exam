class Solution {
public:
    int maxStudents(vector<vector<char>>& seats) {
        int m = seats.size();
        int n = seats[0].size();
        vector<int> v;
        for(int i=0;i<m;i++){
            int curr = 0;
            for(int j=0;j<n;j++){
                curr = curr*2 +(seats[i][j]=='.');
            }
            v.push_back(curr);
        }
        
        
        vector<vector<int>> dp(m+1,vector<int>((1<<n),-1));
        dp[0][0] = 0;
        for(int i=1;i<=m;i++){
            int tmp = v[i-1];
            for(int j=0;j<(1<<n);j++){
                if ((j & tmp) == j && !(j & (j >> 1))) {
                    for (int k = 0; k < (1 << n); ++k) {
                        if (!(j & (k >> 1)) && !((j >> 1) & k) && dp[i - 1][k] != -1) {
                            dp[i][j] = max(dp[i][j], dp[i - 1][k] + __builtin_popcount(j));
                        }
                    }
                }
            }
        }
        return *max_element(dp[m].begin(),dp[m].end());
    }
};
