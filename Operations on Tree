class LockingTree {
public:
    map<int,int> mp;
    vector<int> p,adj[2001];
    LockingTree(vector<int>& parent) {
        p = parent;
        for(int i=0;i<p.size();i++){
            mp[i] = 0;
            adj[i].clear();
        }
        for(int i=1;i<p.size();i++){
            adj[p[i]].push_back(i);
        }
    }
    
    bool lock(int num, int user) {
        if(mp[num]!=0)return false;
        mp[num] = user;
        return true;
    }
    
    bool unlock(int num, int user) {
        if(mp[num]!=user)return false;
        mp[num] = 0;
        return true;
    }
    
    bool dfs1(int num){
        bool flag = false;
        for(auto i : adj[num]){
            flag |= dfs1(i);
        }
        if(mp[num]>0)flag = true;
        return flag;
    }
    
    void dfs2(int num){
        mp[num] = 0;
        for(auto i: adj[num]){
            dfs2(i);
        }
    }
    
    bool upgrade(int num, int user) {
        int val = num;
        while(num!=-1){
            if(mp[num]>0)return false;
            num = p[num];
        }
        num = val;
        bool ans = dfs1(num);
        if(!ans)return false;
        dfs2(num);
        mp[num] = user;
        return true;
    }
};

/**
 * Your LockingTree object will be instantiated and called as such:
 * LockingTree* obj = new LockingTree(parent);
 * bool param_1 = obj->lock(num,user);
 * bool param_2 = obj->unlock(num,user);
 * bool param_3 = obj->upgrade(num,user);
 */
